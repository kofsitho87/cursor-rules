---
description: 
globs: 
alwaysApply: false
---
# Memory Bank Cursor Rules

## 📋 개요

Cursor의 Memory Bank 기능을 효과적으로 활용하기 위한 종합적인 가이드라인입니다. Memory Bank는 AI가 프로젝트 컨텍스트를 더 잘 이해하고 일관된 코드를 생성할 수 있도록 도와주는 핵심 기능입니다.

## 🎯 목적

- AI가 프로젝트의 아키텍처와 패턴을 더 잘 이해하도록 지원
- 코드 생성 시 일관성 향상
- 프로젝트별 컨벤션과 베스트 프랙티스 유지
- 개발 효율성 증대
- 팀 협업 시 코드 품질 통일성 확보

## 🧠 Memory Bank 활용 전략

### 1. 컨텍스트 우선순위

**최우선 기억 대상:**
- 프로젝트 아키텍처 패턴
- 핵심 비즈니스 로직 구조
- API 설계 철학
- 데이터 흐름 패턴

**중요 기억 대상:**
- 네이밍 컨벤션
- 코드 스타일 가이드
- 모듈 구조화 방식
- 에러 처리 패턴

**보조 기억 대상:**
- 주석 스타일
- 테스트 작성 방식
- 문서화 접근법
- 성능 최적화 패턴

### 2. 학습 단계별 접근

**초기 프로젝트 분석:**
```markdown
1. 폴더 구조와 파일 조직 방식 파악
2. package.json, tsconfig.json 등 설정 파일 분석
3. 주요 엔트리 포인트와 라우팅 구조 이해
4. 사용 중인 라이브러리와 도구 확인
```

**코드 패턴 학습:**
```markdown
1. 함수/클래스/변수 네이밍 규칙 분석
2. import/export 스타일 패턴 학습
3. 컴포넌트 설계 철학 이해
4. 상태 관리 접근법 파악
```

**고급 패턴 인식:**
```markdown
1. 디자인 패턴 적용 방식
2. 성능 최적화 기법
3. 접근성과 보안 고려사항
4. 테스트 전략과 커버리지
```

## 🔄 동적 학습 프로세스

### 지속적 컨텍스트 업데이트

- **코드 변경 감지**: 새로운 패턴이나 라이브러리 도입 시 즉시 학습
- **리팩토링 추적**: 아키텍처 변화와 개선사항 반영
- **팀 피드백 반영**: 코드 리뷰 결과를 바탕으로 선호 패턴 조정
- **성능 메트릭 기반**: 실제 성능 데이터를 바탕으로 최적화 패턴 학습

### 컨텍스트 검증 메커니즘

- **일관성 체크**: 기존 패턴과의 호환성 검증
- **베스트 프랙티스 매칭**: 업계 표준과의 정합성 확인
- **프로젝트 특화 요구사항**: 도메인별 특수 요구사항 고려

## 🎯 활용 시나리오

### 새 컴포넌트 생성
- 기존 컴포넌트 구조와 일관성 유지
- 프로젝트 네이밍 컨벤션 자동 적용
- 적절한 타입 정의와 props 설계

### API 개발
- 기존 API 패턴과 일관된 구조 생성
- 에러 처리와 응답 형식 통일
- 적절한 인증/인가 패턴 적용

### 리팩토링 지원
- 전체 프로젝트 컨벤션 준수 확인
- 의존성 최적화 제안
- 코드 중복 제거와 모듈화 개선

### 테스트 코드 작성
- 기존 테스트 패턴과 일관성 유지
- 적절한 mock과 fixture 활용
- 커버리지 최적화 전략 적용

## 📚 참고 자료

- [Cursor Memory Bank 공식 문서](https://docs.cursor.com)
- [Best Practices for AI Code Generation](https://github.com/cursor-rules)
- [TypeScript Style Guide](https://google.github.io/styleguide/tsguide.html)
- [React Best Practices](https://react.dev/learn)

---

💡 **팁**: Memory Bank 설정 후 주기적으로 생성되는 코드의 품질과 일관성을 검토하여 규칙을 개선하세요.