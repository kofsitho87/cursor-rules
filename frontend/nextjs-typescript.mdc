---
description: React best practices and patterns for modern web applications
globs: *.tsx,**/*.ts
alwaysApply: false
---

# Next.js 15.3 + TypeScript 프론트엔드 Cursor Rules

## 프로젝트 개요
- Next.js 15.3 + TypeScript 기반 프로젝트
- App Router 사용
- UI: Tailwind CSS 4 + shadcn/ui (Radix UI) + Lucide React
- 상태 관리: URL 쿼리 파라미터(nuqs), React Query
- 폼 관리: React Hook Form + Zod
- 날짜/시간: date-fns
- 테이블: TanStack Table
- 퍼널 플로우: @use-funnel/browser

## 기술 스택 및 라이브러리

### 핵심 프레임워크
- Next.js 15.3 (App Router)
- TypeScript
- React 19+

### UI 및 스타일링
- Tailwind CSS 4
- shadcn/ui (Radix UI 기반)
- Lucide React (아이콘)

### 상태 관리
- @tanstack/react-query (서버 상태)
- nuqs (URL 쿼리 파라미터 상태)

### 폼 관리
- react-hook-form (폼 상태 관리)
- zod (스키마 검증)

### 데이터 처리
- @tanstack/react-table (테이블)
- date-fns (날짜/시간 처리)

### 플로우 관리
- @use-funnel/browser (스텝 기반 상태 관리)

### React 유틸리티
- react-simplikit (React 전용 경량 유틸리티 라이브러리)

## 코딩 스타일 및 규칙

### 1. 프로젝트 구조 (Feature/Domain 기반)
**규칙:** 코드 타입별이 아닌 기능/도메인별로 디렉토리 구성

**이유:**
- 관련 파일들을 함께 유지하여 응집성 증가
- 기능 이해, 개발, 유지보수, 삭제 간소화

#### 권장 패턴:
```
app/
├── [dynamic-routes]/
├── (route-groups)/
├── api/
├── globals.css
├── layout.tsx
├── user/                    # 도메인별 구성
│   ├── components/
│   │   ├── user-profile.tsx
│   │   └── user-setting.tsx
│   ├── hooks/
│   │   └── use-user-hook.ts
│   ├── types.ts            # 공통 타입
│   └── actions.ts          # 공통 API Actions
├── product/
│   ├── components/
│   │   ├── product-list.tsx
│   │   └── product-card.tsx
│   ├── hooks/
│   │   └── use-products.ts
│   ├── types.ts
│   └── actions.ts
├── order/
│   ├── components/
│   │   └── order-summary.tsx
│   ├── hooks/
│   │   └── use-order.ts
│   ├── types.ts
│   └── actions.ts
└── reservation/
    ├── components/
    │   └── reservation-form.tsx
    ├── hooks/
    │   └── use-reservation.ts
    ├── types.ts
    └── actions.ts
components/           # 공통/공유 컴포넌트
├── ui/              # shadcn/ui 컴포넌트
└── layout/          # 레이아웃 관련 공통 컴포넌트
hooks/               # 공통/공유 hooks
lib/
├── utils.ts         # 공통 유틸리티
├── validations/     # 공통 검증 스키마
└── api/            # 공통 API 클라이언트
```

### 2. 컴포넌트 작성 규칙
- 모든 컴포넌트는 TypeScript로 작성
- 함수형 컴포넌트 사용
- props는 type으로 정의
- 기본 export 사용
- 컴포넌트명은 PascalCase

```typescript
type ComponentProps = {
  title: string
  children: React.ReactNode
}

export default function Component({ title, children }: ComponentProps) {
  return (
    <div className="...">
      <h1>{title}</h1>
      {children}
    </div>
  )
}
```

### 3. CSS 및 스타일링
- Tailwind CSS 4 사용
- shadcn/ui 컴포넌트 우선 사용
- 커스텀 CSS는 최소화
- 반응형 디자인 고려 (mobile-first)
- 다크 모드 지원

### 4. 상태 관리 규칙

#### URL 쿼리 파라미터 (nuqs)
```typescript
import { useQueryState, parseAsString, parseAsInteger } from 'nuqs'

// 기본 사용법
const [search, setSearch] = useQueryState('search', parseAsString.withDefault(''))

// 여러 파라미터 관리
const [filters, setFilters] = useQueryStates({
  category: parseAsString.withDefault('all'),
  page: parseAsInteger.withDefault(1),
  limit: parseAsInteger.withDefault(10)
})
```

#### React Query
```typescript
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'

// 데이터 페칭
const { data, isLoading, error } = useQuery({
  queryKey: ['posts', { page, limit }],
  queryFn: () => fetchPosts({ page, limit }),
})

// 데이터 변경
const mutation = useMutation({
  mutationFn: createPost,
  onSuccess: () => {
    queryClient.invalidateQueries({ queryKey: ['posts'] })
  },
})
```

### 5. 폼 관리 (React Hook Form + Zod)
```typescript
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'

const formSchema = z.object({
  email: z.string().email('올바른 이메일을 입력해주세요'),
  name: z.string().min(2, '이름은 2글자 이상이어야 합니다'),
})

type FormData = z.infer<typeof formSchema>

export default function MyForm() {
  const form = useForm<FormData>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      email: '',
      name: '',
    },
  })

  const onSubmit = (data: FormData) => {
    // 폼 제출 로직
  }

  return (
    <form onSubmit={form.handleSubmit(onSubmit)}>
      {/* 폼 필드들 */}
    </form>
  )
}
```

### 6. 퍼널 플로우 (@use-funnel/browser)
```typescript
import { useFunnel } from '@use-funnel/browser'

type FunnelState = {
  Step1: { name?: string }
  Step2: { name: string; email?: string }
  Step3: { name: string; email: string; phone?: string }
  Complete: { name: string; email: string; phone: string }
}

export default function MyFunnel() {
  const funnel = useFunnel<FunnelState>({
    id: 'my-funnel',
    initial: {
      step: 'Step1',
      context: {},
    },
  })

  return (
    <funnel.Render
      Step1={({ history }) => (
        <div>
          <button onClick={() => history.push('Step2', { name: 'John' })}>
            Next
          </button>
        </div>
      )}
      Step2={({ history, context }) => (
        <div>
          <p>Hello {context.name}</p>
          <button onClick={() => history.push('Step3', { email: 'john@example.com' })}>
            Next
          </button>
        </div>
      )}
      // ... 다른 스텝들
    />
  )
}
```

### 7. 날짜/시간 처리 (date-fns)
```typescript
import { format, parseISO, addDays, isAfter } from 'date-fns'
import { ko } from 'date-fns/locale'

// 날짜 포맷팅
const formattedDate = format(new Date(), 'yyyy-MM-dd', { locale: ko })

// 날짜 연산
const tomorrow = addDays(new Date(), 1)

// 날짜 비교
const isFuture = isAfter(someDate, new Date())
```

### 8. 테이블 (TanStack Table)
```typescript
import { useReactTable, getCoreRowModel, flexRender } from '@tanstack/react-table'

const columns = [
  {
    accessorKey: 'name',
    header: '이름',
  },
  {
    accessorKey: 'email',
    header: '이메일',
  },
]

export default function DataTable({ data }: { data: any[] }) {
  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
  })

  return (
    <table>
      <thead>
        {table.getHeaderGroups().map(headerGroup => (
          <tr key={headerGroup.id}>
            {headerGroup.headers.map(header => (
              <th key={header.id}>
                {flexRender(header.column.columnDef.header, header.getContext())}
              </th>
            ))}
          </tr>
        ))}
      </thead>
      <tbody>
        {table.getRowModel().rows.map(row => (
          <tr key={row.id}>
            {row.getVisibleCells().map(cell => (
              <td key={cell.id}>
                {flexRender(cell.column.columnDef.cell, cell.getContext())}
              </td>
            ))}
          </tr>
        ))}
      </tbody>
    </table>
  )
}
```

### 9. React 유틸리티 (react-simplikit)
`react-simplikit`은 React의 설계 원칙을 존중하면서 개발 경험을 개선하는 경량 라이브러리입니다. SSR 환경에서 안전하고, 제로 의존성으로 번들 사이즈를 최적화합니다.

#### 주요 특징
- **SSR 안전성**: hydration 불일치 오류 방지
- **제로 의존성**: React 외 다른 라이브러리에 의존하지 않음
- **작은 번들 사이즈**: react-use 대비 최대 89% 작은 크기
- **선언적 인터페이스**: React의 선언적 API와 유사한 개발 경험

#### 컴포넌트 활용

**Separated - 배열 요소 사이 구분자 삽입**
```typescript
import { Separated } from 'react-simplikit'

// ❌ 기존 방식
const texts = ['hello', 'react', 'world']
function Page() {
  return (
    <>
      {texts.map((text, idx) => (
        <Fragment key={text}>
          <div>{text}</div>
          {idx < texts.length - 1 ? <Border type="padding24" /> : null}
        </Fragment>
      ))}
    </>
  )
}

// ✅ react-simplikit 사용
function Page() {
  return (
    <Separated by={<Border type="padding24" />}>
      {texts.map(text => (
        <div key={text}>{text}</div>
      ))}
    </Separated>
  )
}
```

**SwitchCase - 조건부 렌더링**
```typescript
import { SwitchCase } from 'react-simplikit'

function StatusDisplay({ status }: { status: 'loading' | 'success' | 'error' }) {
  return (
    <SwitchCase
      value={status}
      caseBy={{
        loading: <Spinner />,
        success: <SuccessMessage />,
        error: <ErrorMessage />,
      }}
    />
  )
}
```

**ImpressionArea - 요소 노출 추적**
```typescript
import { ImpressionArea } from 'react-simplikit'

function TrackableContent() {
  return (
    <ImpressionArea
      onImpressionStart={() => console.log('요소가 보여요')}
      onImpressionEnd={() => console.log('요소가 사라졌어요')}
      timeThreshold={1000} // 1초 이상 노출
      areaThreshold={0.5}  // 50% 이상 보일 때
    >
      <div>추적할 콘텐츠</div>
    </ImpressionArea>
  )
}
```

#### 훅 활용

**useToggle - 토글 상태 관리**
```typescript
import { useToggle } from 'react-simplikit'

function Modal() {
  // ❌ 기존 방식
  const [isOpen, setOpen] = useState(false)
  const toggle = useCallback(() => setOpen(prev => !prev), [])

  // ✅ react-simplikit 사용
  const [isOpen, toggle] = useToggle(false)

  return (
    <div>
      <button onClick={toggle}>모달 토글</button>
      {isOpen && <ModalContent />}
    </div>
  )
}
```

**useDebounce - 디바운스 처리**
```typescript
import { useDebounce } from 'react-simplikit'

function SearchInput() {
  const [query, setQuery] = useState('')
  
  const debouncedSearch = useDebounce(
    (searchTerm: string) => {
      // API 호출 로직
      searchAPI(searchTerm)
    },
    500 // 500ms 디바운스
  )

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value
    setQuery(value)
    debouncedSearch(value)
  }

  return <input value={query} onChange={handleInputChange} />
}
```

**useOutsideClickEffect - 외부 클릭 감지**
```typescript
import { useOutsideClickEffect } from 'react-simplikit'

function Dropdown() {
  const [isOpen, setIsOpen] = useState(false)
  const dropdownRef = useRef<HTMLDivElement>(null)

  useOutsideClickEffect(dropdownRef, () => {
    setIsOpen(false)
  })

  return (
    <div ref={dropdownRef}>
      <button onClick={() => setIsOpen(!isOpen)}>드롭다운</button>
      {isOpen && <DropdownMenu />}
    </div>
  )
}
```

**useIntersectionObserver - 교차 관찰**
```typescript
import { useIntersectionObserver } from 'react-simplikit'

function LazyImage({ src, alt }: { src: string; alt: string }) {
  const [isLoaded, setIsLoaded] = useState(false)
  
  const ref = useIntersectionObserver<HTMLDivElement>(
    (entry) => {
      if (entry.isIntersecting && !isLoaded) {
        setIsLoaded(true)
      }
    },
    { threshold: 0.1 }
  )

  return (
    <div ref={ref}>
      {isLoaded ? (
        <img src={src} alt={alt} />
      ) : (
        <div className="placeholder">로딩 중...</div>
      )}
    </div>
  )
}
```

**useAsyncEffect - 비동기 이펙트**
```typescript
import { useAsyncEffect } from 'react-simplikit'

function UserProfile({ userId }: { userId: string }) {
  const [user, setUser] = useState<User | null>(null)
  const [loading, setLoading] = useState(true)

  useAsyncEffect(async () => {
    setLoading(true)
    try {
      const userData = await fetchUser(userId)
      setUser(userData)
    } catch (error) {
      console.error('사용자 정보 로드 실패:', error)
    } finally {
      setLoading(false)
    }
  }, [userId])

  if (loading) return <Spinner />
  return <div>{user?.name}</div>
}
```

**useStorageState - 스토리지 연동 상태**
```typescript
import { useStorageState } from 'react-simplikit'

function ThemeToggle() {
  const [theme, setTheme] = useStorageState('theme', 'light', {
    storage: 'localStorage'
  })

  return (
    <button onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}>
      현재 테마: {theme}
    </button>
  )
}
```

#### 사용 가이드라인

**언제 사용할까?**
- 복잡한 상태 로직을 선언적으로 단순화하고 싶을 때
- SSR 환경에서 안전한 클라이언트 사이드 로직이 필요할 때
- 번들 사이즈 최적화가 중요한 프로젝트에서
- React의 설계 원칙에 맞는 직관적인 API를 원할 때

**기존 라이브러리와의 관계**
- React Query: 서버 상태 관리 (보완적 관계)
- nuqs: URL 쿼리 파라미터 상태 (보완적 관계)
- React Hook Form: 폼 상태 관리 (보완적 관계)
- react-simplikit: 일반적인 React 유틸리티 (추가적 도구)

## Readability (가독성)
코드의 명확성과 이해도를 향상시키기 위한 규칙들

### 1. 매직 넘버/문자열 명명화
**규칙:** 매직 넘버와 하드코딩된 문자열을 의미 있는 상수로 대체

**적용:**
```typescript
// ❌ 나쁜 예
const isValidPassword = password.length >= 8
const { data } = useQuery({
  queryKey: ['products', page],
  queryFn: () => fetchProducts({ page, limit: 10 }),
})

// ✅ 좋은 예
const MIN_PASSWORD_LENGTH = 8
const PRODUCTS_PER_PAGE = 10

const isValidPassword = password.length >= MIN_PASSWORD_LENGTH
const { data } = useQuery({
  queryKey: ['products', page],
  queryFn: () => fetchProducts({ page, limit: PRODUCTS_PER_PAGE }),
})
```

**상수 파일 분리:**
```typescript
// lib/constants.ts
export const PAGINATION = {
  PRODUCTS_PER_PAGE: 10,
  DEFAULT_PAGE: 1,
  MAX_PRODUCTS_DISPLAY: 20,
} as const

export const UI_LAYOUT = {
  PRODUCTS_GRID_COLUMNS: 3,
  MOBILE_BREAKPOINT: 768,
  TABLET_BREAKPOINT: 1024,
} as const
```

### 2. 구현 세부사항 추상화
**규칙:** 복잡한 로직을 전용 hooks, 컴포넌트, 유틸리티 함수로 분리

**적용:**
- 비즈니스 로직은 custom hooks로 분리
- 복잡한 UI 로직은 별도 컴포넌트로 분리
- 공통 로직은 유틸리티 함수로 분리
- 폼 검증은 Zod 스키마와 react-hook-form 조합 사용

**예시:**
```typescript
// hooks/useUserProfile.ts - 로직 추상화
export function useUserProfile(userId: string) {
  const [user, setUser] = useState<User | null>(null)
  
  const updateUser = useMutation({
    mutationFn: (userData: UpdateUserData) => updateUserAPI(userId, userData),
    onSuccess: (updatedUser) => {
      setUser(updatedUser)
      toast.success('프로필이 업데이트되었습니다')
    },
  })

  return {
    user,
    updateUser: updateUser.mutate,
    isUpdating: updateUser.isPending,
  }
}

// 메인 컴포넌트 - 간단하고 명확함
export default function UserProfile({ userId }: { userId: string }) {
  const { user, updateUser, isUpdating } = useUserProfile(userId)
  
  // 간단한 로직만 유지
}
```

### 3. 컴포넌트 분리 기준
- **Single Responsibility:** 하나의 컴포넌트는 하나의 책임만
- **50줄 이상의 JSX는 분리 고려**
- **3개 이상의 useEffect가 있으면 분리 고려**
- **5개 이상의 props는 객체로 그룹화 고려**

## Coupling (결합도)
코드의 다른 부분들 간의 의존성을 최소화하기 위한 규칙들

### 1. 조기 추상화 방지 (Premature Abstraction 방지)
**규칙:** 사용 사례가 다를 수 있다면 중복 허용을 하더라도 조기 추상화를 피하고 낮은 결합도를 선호

**이유:**
- 잠재적으로 다를 수 있는 로직을 하나의 추상화로 강제하는 것으로 인한 강한 결합 방지
- 미래 요구사항이 불확실할 때 일부 중복을 허용하면 분리와 유지보수성 향상

**적용 지침:**
추상화하기 전에 로직이 정말로 동일하고 모든 사용 사례에서 동일하게 _유지될_ 가능성이 높은지 고려하세요. 
만약 다른 방향으로 발전할 가능성이 있다면(예: 다른 페이지에서 `useReservationModal`과 같은 공유 훅에서 약간 다른 동작이 필요한 경우), 
처음에는 로직을 분리해서 유지하는 것(중복 허용)이 더 유지보수 가능하고 분리된 코드로 이어질 수 있습니다.

### 2. 상태 관리 범위 제한 (Overly Broad Hooks 방지)
**규칙:** 넓은 상태 관리를 작고 집중된 hooks/contexts로 분리

**이유:**
- 컴포넌트가 필요한 상태 슬라이스에만 의존하도록 하여 결합도 감소
- 관련 없는 상태 변경으로 인한 불필요한 리렌더링 방지로 성능 향상

**권장 패턴:**
```typescript
// nuqs를 사용한 집중된 hooks
import { useQueryState, parseAsInteger, parseAsString } from 'nuqs'

// 특정 쿼리 파라미터만을 위한 hook
export function useProductIdParam() {
  const [productId, setProductId] = useQueryState(
    'productId', 
    parseAsInteger.withDefault(null)
  )
  
  return [productId, setProductId] as const
}

// 별도의 hook으로 날짜 범위 관리
export function useDateRangeParams() {
  const [startDate, setStartDate] = useQueryState('startDate', parseAsString)
  const [endDate, setEndDate] = useQueryState('endDate', parseAsString)
  
  return {
    startDate,
    endDate,
    setStartDate,
    setEndDate,
  }
}

// ❌ 모든 것을 하나의 hook에서 관리하는 것보다
// export function useAllQueryParams() { /* 모든 쿼리 파라미터 관리 */ }

// ✅ 필요한 것만 import해서 사용
function ProductDetail() {
  const [productId] = useProductIdParam() // 날짜 범위 상태와 분리됨
  // ...
}
```

### 3. Props Drilling 제거 (Component Composition 활용)
**규칙:** Props Drilling 대신 Component Composition 사용

**이유:**
- 불필요한 중간 의존성 제거로 결합도 크게 감소
- 리팩토링 용이성과 평면적인 컴포넌트 트리에서 데이터 흐름 명확화

**권장 패턴:**
```typescript
// ❌ Props Drilling 예시
function ReservationPage() {
  const [selectedDate, setSelectedDate] = useState(new Date())
  const [selectedTime, setSelectedTime] = useState('')
  
  return (
    <ReservationContainer 
      selectedDate={selectedDate}
      selectedTime={selectedTime}
      onDateChange={setSelectedDate}
      onTimeChange={setSelectedTime}
    />
  )
}

function ReservationContainer({ selectedDate, selectedTime, onDateChange, onTimeChange }) {
  return (
    <ReservationForm 
      selectedDate={selectedDate}
      selectedTime={selectedTime}
      onDateChange={onDateChange}
      onTimeChange={onTimeChange}
    />
  )
}

// ✅ Component Composition 사용
function ReservationPage() {
  const [selectedDate, setSelectedDate] = useState(new Date())
  const [selectedTime, setSelectedTime] = useState('')
  
  return (
    <ReservationModal>
      <DatePicker 
        value={selectedDate} 
        onChange={setSelectedDate} 
      />
      <TimePicker 
        value={selectedTime} 
        onChange={setSelectedTime} 
      />
      <ReservationSummary 
        date={selectedDate} 
        time={selectedTime} 
      />
    </ReservationModal>
  )
}
```

**Context API 활용:**
```typescript
// 복잡한 상태가 많은 컴포넌트에서는 Context 사용
const ReservationContext = createContext<{
  selectedDate: Date
  selectedTime: string
  setSelectedDate: (date: Date) => void
  setSelectedTime: (time: string) => void
}>()

function ReservationProvider({ children }) {
  const [selectedDate, setSelectedDate] = useState(new Date())
  const [selectedTime, setSelectedTime] = useState('')
  
  return (
    <ReservationContext.Provider value={{
      selectedDate,
      selectedTime,
      setSelectedDate,
      setSelectedTime
    }}>
      {children}
    </ReservationContext.Provider>
  )
}
```

## 명명 규칙

### 파일명
- **컴포넌트 파일:** `kebab-case` (user-profile.tsx, product-card.tsx)
- **페이지 파일:** `kebab-case` (about-us.tsx, contact.tsx)  
- **유틸리티 파일:** `kebab-case` (format-date.ts, api-client.ts)

### 함수/변수명
- **컴포넌트 함수:** `PascalCase` (UserProfile, ProductCard)
- **일반 함수:** `camelCase` (formatDate, getUserData)
- **변수:** `camelCase` (userName, isLoading)
- **상수:** `UPPER_SNAKE_CASE` (API_BASE_URL, MAX_RETRY_COUNT)

### React 관련
- **Custom Hooks:** `use`로 시작하는 `camelCase` (useUserData, useLocalStorage)
- **이벤트 핸들러:** `handle`로 시작하는 `camelCase` (handleSubmit, handleClick)
- **Boolean 변수:** `is`, `has`, `can`, `should`로 시작 (isLoading, hasError, canEdit)

### 타입/인터페이스
- **Interface:** `PascalCase` (UserData, ApiResponse)
- **Type Alias:** `PascalCase` (ButtonVariant, ThemeMode)
- **Enum:** `PascalCase` (UserRole, OrderStatus)

## 코드 구조화

### 컴포넌트 내부 순서
```typescript
export default function MyComponent() {
  // 1. Hooks (상태, 효과 등)
  const [state, setState] = useState()
  const { data } = useQuery()
  
  // 2. 계산된 값들 (useMemo, 파생 상태)
  const computedValue = useMemo(() => {}, [dependency])
  
  // 3. 이벤트 핸들러들
  const handleClick = () => {}
  const handleSubmit = () => {}
  
  // 4. 조건부 렌더링 (early returns)
  if (loading) return <Spinner />
  if (error) return <ErrorMessage />
  
  // 5. 메인 JSX 반환
  return <div>...</div>
}
```

## 에러 처리
```typescript
// React Query 에러 처리
const { data, error, isError } = useQuery({
  queryKey: ['user'],
  queryFn: fetchUser,
  throwOnError: false,
})

if (isError) {
  return <div>에러가 발생했습니다: {error.message}</div>
}

// 폼 에러 처리
const { formState: { errors } } = useForm()
```

## 접근성 및 SEO
- 적절한 HTML 시맨틱 태그 사용
- alt 속성, aria-label 등 접근성 속성 추가
- Next.js 메타데이터 API 활용
- 이미지 최적화 (next/image 사용)

## 퍼포먼스 최적화
- React.memo, useMemo, useCallback 적절히 사용
- 동적 import 활용 (lazy loading)
- 이미지 최적화
- 번들 크기 최적화

## 테스트 (권장사항)
- Jest + React Testing Library
- MSW (Mock Service Worker) 활용
- 컴포넌트 단위 테스트
- 통합 테스트

## 추가 가이드라인
- TypeScript strict 모드 사용
- ESLint + Prettier 설정
- 코드 리뷰 시 타입 안정성 체크
- 재사용 가능한 컴포넌트 작성
- 성능 최적화 고려
- 접근성 및 SEO 최적화 